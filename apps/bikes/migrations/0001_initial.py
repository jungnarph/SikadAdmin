# Generated by Django 4.2.7 on 2025-10-03 19:23

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('firebase_id', models.CharField(db_index=True, help_text='Document ID from Firebase', max_length=255, unique=True)),
                ('bike_model', models.CharField(max_length=100)),
                ('bike_type', models.CharField(choices=[('REGULAR', 'Regular'), ('ELECTRIC', 'Electric'), ('MOUNTAIN', 'Mountain')], default='REGULAR', max_length=20)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_USE', 'In Use'), ('MAINTENANCE', 'Under Maintenance'), ('OFFLINE', 'Offline')], default='AVAILABLE', max_length=20)),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Current latitude coordinate', max_digits=10, null=True)),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Current longitude coordinate', max_digits=10, null=True)),
                ('current_zone_id', models.CharField(blank=True, help_text='Firebase zone document ID where bike is currently located', max_length=255, null=True)),
                ('synced_at', models.DateTimeField(auto_now=True, help_text='Last sync from Firebase')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Bike',
                'verbose_name_plural': 'Bikes',
                'db_table': 'bikes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BikePerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('performance_date', models.DateField(help_text='Date for this performance record')),
                ('ride_count', models.IntegerField(default=0, help_text='Number of rides completed')),
                ('total_distance', models.DecimalField(decimal_places=2, default=0, help_text='Total distance traveled in km', max_digits=10)),
                ('total_duration', models.IntegerField(default=0, help_text='Total ride duration in minutes')),
                ('revenue_generated', models.DecimalField(decimal_places=2, default=0, help_text='Total revenue generated', max_digits=10)),
                ('utilization_rate', models.DecimalField(decimal_places=2, default=0, help_text='Percentage of day bike was in use (0-100)', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('bike', models.ForeignKey(db_column='bike_firebase_id', on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='bikes.bike', to_field='firebase_id')),
            ],
            options={
                'verbose_name': 'Bike Performance',
                'verbose_name_plural': 'Bike Performance',
                'db_table': 'bike_performance',
                'ordering': ['-performance_date'],
            },
        ),
        migrations.CreateModel(
            name='BikeLocationHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('speed', models.DecimalField(blank=True, decimal_places=2, help_text='Speed in km/h', max_digits=5, null=True)),
                ('recorded_at', models.DateTimeField(help_text='When this location was recorded')),
                ('synced_at', models.DateTimeField(auto_now=True, help_text='When synced to PostgreSQL')),
                ('bike', models.ForeignKey(db_column='bike_firebase_id', help_text='Reference to bike by Firebase ID', on_delete=django.db.models.deletion.CASCADE, related_name='location_history', to='bikes.bike', to_field='firebase_id')),
            ],
            options={
                'verbose_name': 'Bike Location History',
                'verbose_name_plural': 'Bike Location History',
                'db_table': 'bike_location_history',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='bike',
            index=models.Index(fields=['firebase_id'], name='bikes_firebas_6854da_idx'),
        ),
        migrations.AddIndex(
            model_name='bike',
            index=models.Index(fields=['status'], name='bikes_status_9d7b1b_idx'),
        ),
        migrations.AddIndex(
            model_name='bike',
            index=models.Index(fields=['bike_type'], name='bikes_bike_ty_ba747c_idx'),
        ),
        migrations.AddIndex(
            model_name='bike',
            index=models.Index(fields=['current_zone_id'], name='bikes_current_57480d_idx'),
        ),
        migrations.AddIndex(
            model_name='bikeperformance',
            index=models.Index(fields=['bike', 'performance_date'], name='bike_perfor_bike_fi_0bdda7_idx'),
        ),
        migrations.AddIndex(
            model_name='bikeperformance',
            index=models.Index(fields=['performance_date'], name='bike_perfor_perform_20617e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bikeperformance',
            unique_together={('bike', 'performance_date')},
        ),
        migrations.AddIndex(
            model_name='bikelocationhistory',
            index=models.Index(fields=['bike', 'recorded_at'], name='bike_locati_bike_fi_5f3fcc_idx'),
        ),
        migrations.AddIndex(
            model_name='bikelocationhistory',
            index=models.Index(fields=['recorded_at'], name='bike_locati_recorde_1b98c4_idx'),
        ),
    ]
